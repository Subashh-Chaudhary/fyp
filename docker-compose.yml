# =============================================================================
# DOCKER COMPOSE - Local Development Environment
# =============================================================================
# This docker-compose file sets up a complete development environment
# for the Crop Disease Detection System with all required services

version: '3.8'

services:
  # =============================================================================
  # BACKEND SERVICE - NestJS API Server
  # =============================================================================
  backend:
    # Build the backend from the Dockerfile in the backend directory
    build:
      context: ./backend
      dockerfile: Dockerfile
    # Map container port 3000 to host port 3000
    ports:
      - "3000:3000"
    # Environment variables for development
    environment:
      - NODE_ENV=development
      - PORT=3000
      # Database connection variables (will be used by NestJS)
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=crop_disease_db
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=password
    # Volume mounts for hot-reload development
    # Maps local backend directory to container /app
    # Excludes node_modules to use container's installed modules
    volumes:
      - ./backend:/app
      - /app/node_modules
    # Wait for database to be ready before starting
    depends_on:
      - database
    # Restart policy for development
    restart: unless-stopped
    # Network configuration
    networks:
      - app-network

  # =============================================================================
  # FRONTEND SERVICE - Expo React Native Development Server
  # =============================================================================
  frontend:
    # Build the frontend from the Dockerfile in the frontend directory
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # Map Expo development server ports
    # 19000: Main Expo development server
    # 19001: Expo development server (alternate)
    # 19002: Metro bundler
    ports:
      - "19000:19000"
      - "19001:19001"
      - "19002:19002"
    # Volume mounts for hot-reload development
    # Maps local frontend directory to container /app
    # Excludes node_modules to use container's installed modules
    volumes:
      - ./frontend:/app
      - /app/node_modules
    # Fix permission issues with volume mounts
    user: "1001:1001"
    # Environment variables for Expo development
    environment:
      - NODE_ENV=development
      - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
      - EXPO_USE_DEV_SERVER=1
      # Backend API URL for frontend to connect to
      - REACT_APP_API_URL=http://localhost:3000
    # Restart policy for development
    restart: unless-stopped
    # Network configuration
    networks:
      - app-network

  # =============================================================================
  # DATABASE SERVICE - PostgreSQL Database
  # =============================================================================
  database:
    # Use PostgreSQL 15 official image
    image: postgres:15-alpine
    # Environment variables for database setup
    environment:
      # Database name for the application
      POSTGRES_DB: crop_disease_db
      # Database user
      POSTGRES_USER: postgres
      # Database password (change in production!)
      POSTGRES_PASSWORD: password
      # Initialize database with UTF-8 encoding
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    # Map database port 5432 to host port 5432
    ports:
      - "5432:5432"
    # Persistent volume for database data
    # This ensures data persists between container restarts
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Optional: Mount initialization scripts
      - ./database/init:/docker-entrypoint-initdb.d
    # Restart policy
    restart: unless-stopped
    # Network configuration
    networks:
      - app-network
    # Health check for database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d crop_disease_db"]
      interval: 10s
      timeout: 5s
      retries: 5

# =============================================================================
# VOLUMES - Persistent Data Storage
# =============================================================================
volumes:
  # PostgreSQL data volume
  # This ensures database data persists between container restarts
  postgres_data:
    driver: local

# =============================================================================
# NETWORKS - Container Communication
# =============================================================================
networks:
  # Custom network for all services to communicate
  app-network:
    driver: bridge
    # Enable IPv6 support
    enable_ipv6: true
